// Generated by CoffeeScript 1.8.0
(function() {
  var AdmZip, Library, LibraryManager, fs, path, request, url;

  fs = require('fs');

  url = require("url");

  AdmZip = require('adm-zip');

  path = require('path');

  Library = require('cql-execution').Library;

  request = require('urllib-sync').request;

  module.exports.LibraryManager = LibraryManager = (function() {
    function LibraryManager(baseUrl, options) {
      this.baseUrl = baseUrl;
      this.options = options != null ? options : {};
      this.uri = url.parse(this.baseUrl);
      this.isZip = this.checkZip();
      this.isFile = this.isZip || this.uri.protocol === "file" || !this.uri.protocol;
      this.cache = {};
    }

    LibraryManager.prototype.resolve = function(library, version) {
      var data, json, lib, name;
      name = "" + library + "_" + version;
      if (this.cache[name]) {
        return this.cache[name];
      }
      data = this.isFile ? this.readFromFs(library, version) : this.readFromHttp(library, version);
      json = JSON.parse(data);
      lib = new Library(json, this);
      lib.source = json;
      if (this.options.cache_enabled) {
        this.cache[name] = lib;
      }
      return lib;
    };

    LibraryManager.prototype.readFromFs = function(library, version) {
      var basePath, cql_path, name;
      name = version ? "" + library + "_" + version + ".json" : "" + library + ".json";
      basePath = this.zipDir || this.baseUrl;
      cql_path = path.join(basePath, name);
      if (!fs.existsSync(cql_path)) {
        throw "CQL Library " + library + " " + version + " not found";
      }
      return fs.readFileSync(cql_path);
    };

    LibraryManager.prototype.readFromHttp = function(library, version) {
      var fullUrl, res;
      fullUrl = url.resolve(this.baseUrl, "" + library + "/" + version);
      res = request(this.baseUrl, {
        timeout: 30000,
        headers: {
          "ACCEPT": "application/json, text/json, application-x/json, json"
        }
      });
      return res.data;
    };

    LibraryManager.prototype.checkZip = function() {
      var tempDir, zipFile;
      if ((this.uri.protocol === "file" || !this.uri.protocol) && fs.lstatSync(this.baseUrl).isFile() && path.extname(this.baseUrl) === ".zip") {
        zipFile = new AdmZip(this.baseUrl);
        tempDir = this.options.temp_dir || "./tmp";
        this.zipDir = path.join(tempDir, path.basename(this.baseUrl));
        zipFile.extractAllTo(this.zipDir, true);
        return true;
      }
    };

    LibraryManager.prototype.findAndSortVersions = function(library) {
      var filenames, possibles, prefix, versions;
      prefix = "" + library + "_";
      possibles = fs.readdirSync(this.base_dir);
      filenames = possibles.filter(function(x) {
        return x.indexOf(prefix) === 0;
      });
      return versions = filenames.each(function(x) {
        var _ref;
        return (_ref = x.slice(0, prefix.length)) != null ? _ref.replace(".json", "") : void 0;
      });
    };

    return LibraryManager;

  })();

}).call(this);

//# sourceMappingURL=library_manager.js.map
